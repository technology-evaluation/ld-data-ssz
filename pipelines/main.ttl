@base <http://ssz.lindas.ch/pipeline/>.
@prefix p: <https://pipeline.described.at/>.
@prefix code: <https://code.described.at/>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.

<defaultVars>
  p:variable [ a p:Variable;
    p:name "ENDPOINT_URL";
    p:value "http://localhost:3030/data"
  ], [ a p:Variable;
    p:name "ENDPOINT_USER";
    p:value ""
  ], [ a p:Variable;
    p:name "ENDPOINT_PASSWORD";
    p:value ""
  ], [ a p:Variable;
    p:name "observer";
    p:value "https://ld.stadt-zuerich.ch/org/SSZ"
  ], [ a p:Variable;
    p:name "outputFile";
    p:value "output/output.nt"
  ], [ a p:Variable;
    p:name "cubeBaseIri";
    p:value "https://ld.stadt-zuerich.ch/statistics/"
  ], [ a p:Variable;
    p:name "cubeMetadataFile";
    p:value "assets/cubes.ttl"
  ], [ a p:Variable;
    p:name "cubeOutputFile";
    p:value "output/cubes.nt"
  ], [ a p:Variable;
    p:name "dimensionOutputFile";
    p:value "output/dimensions.nt"
  ], [ a p:Variable;
    p:name "cubeCsvMappingFilePattern";
    p:value "observation/*.json"
  ], [ a p:Variable;
    p:name "dimensionCsvMappingFilePattern";
#    p:value "src-gen/mapping_+(datenobjekte*|datenattribute|rechtsgrundlage).csv.meta.json"
    p:value "src-gen/mapping_!(hdb|datenattribute).csv.meta.json" 

  ], [ a p:Variable;
    p:name "destinationGraph";
    p:value "https://lindas.admin.ch/stadtzuerich/stat"
  ].

#
# Combined Cubes & Dimensions pipeline & steps
#
<toFile> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <cubesAndDimensionsTo>
      <serialize>
      <writeFile>
    )
  ].

<toStore> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <cubesAndDimensionsTo>
      <transformTriples>
      <setDestinationGraph>
      <graphStorePut>
    )
  ].

<fileToStore> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <readFile>
      <parseN3>
      <setDestinationGraph>
      <graphStorePut>
    )
  ].

<cubesAndDimensionsTo> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/concat.js#object>
  ];
  code:arguments (
    <cubes>
    <dimensions>
  ).

<readFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("outputFile"^^p:VariableName).

<parseN3> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/n3.js#parse>
  ].

<writeFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createWriteStream>
  ];
  code:arguments ("outputFile"^^p:VariableName).

#
# Cube Pipeline & Steps
#
<cubes> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <listCubeCsvwMetaFiles>
      <forEachCubeCsvwMetaFile>
    )
  ].

<cubesToFile> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <cubes>
      <serialize>
      <writeCubeFile>
    )
  ].

<static> a p:Pipeline, p:ReadableObjectMode;
  p:variables <staticVars>;
  p:steps [
    p:stepList (
      <readFile>
      <parseN3>
    )
  ].

<listCubeCsvwMetaFiles> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base#glob>
  ];
  code:arguments[
    code:name "pattern";
    code:value "cubeCsvMappingFilePattern"^^p:VariableName
  ].

<forEachCubeCsvwMetaFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/forEach.js#default>
  ];
  code:arguments (<readCubeCsvTriples> "csvMapping").

<readCubeCsvTriples> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readCsv>
      <parseCsv>
      <mapAll>
      <filterAll>
      <routeTriples>
      <toDataset>
      <toObservation>
      <buildCubeShape>
      <flatten>
      <routeNames>
    )
  ].

<routeTriples> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <file:../lib/router.js#default>
  ];
  code:arguments [
    code:name "cubes";
    code:value "./input/HDB_CUBES.csv"
  ], [
    code:name "dimensions";
    code:value "./input/HDB_DIMENSIONEN.csv"
  ], [
    code:name "raum";
    code:value "./input/HDB_RAUM.csv"
  ], [
    code:name "zeit";
    code:value "./input/HDB_ZEIT.csv"
  ].

<routeNames> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <file:../lib/routerNames.js#default>
  ];
  code:arguments [
    code:name "baseIri";
    code:value "cubeBaseIri"^^p:VariableName
  ], [
    code:name "cubes";
    code:value "./input/HDB_CUBES.csv"
  ], [
    code:name "dimensions";
    code:value "./input/HDB_DIMENSIONEN.csv"
  ].

<writeCubeFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createWriteStream>
  ];
  code:arguments ("cubeOutputFile"^^p:VariableName).

#
# Dimension Pipeline & Steps
#
<dimensions> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <listDimensionCsvwMetaFiles>
      <forEachDimensionCsvwMetaFile>
      <createRaumDefinedTermSet>
      <flatten>
      <createDimensionDefinedTermSet>
      <flatten>
      <createRaumHierarchie>
      <flatten>
      <sameAsIri>
      <referenceTimeToIri>
      <flatten>
      #<removeInvalidDates>
    )
  ].

<dimensionsToFile> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <dimensions>
      <serialize>
      <writeDimensionFile>
    )
  ].

<listDimensionCsvwMetaFiles> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base#glob>
  ];
  code:arguments[
    code:name "pattern";
    code:value "dimensionCsvMappingFilePattern"^^p:VariableName
  ].

<forEachDimensionCsvwMetaFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/forEach.js#default>
  ];
  code:arguments (<readDimensionCsvTriples> "csvMapping").

<readDimensionCsvTriples> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readCsv>
      <parseCsv>
      <removeCsvwTriples>
      <removeEmptyCode>
    )
  ].

<writeDimensionFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createWriteStream>
  ];
  code:arguments ("dimensionOutputFile"^^p:VariableName).

#
# Common Subpipelines & Steps
#
<readCsv> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-csvw#fetch>
  ];
  code:arguments [
    code:name "csvw";
    code:value "file:${csvMapping}"^^code:EcmaScriptTemplateLiteral
  ].

<parseCsv> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/csvw.js#parse>
  ];
  code:arguments [
    code:name "metadata";
    code:value <parseMetadata>
  ].

<removeCsvwTriples> a p:Step ;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/filter.js#default>
  ];
  code:arguments ([ a code:EcmaScriptModule;
    code:link <file:../lib/isNotCsvwTriple.js#default>
  ]).

<removeNullValues> a p:Step ;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/filter.js#default>
  ];
  code:arguments ([ a code:EcmaScriptModule;
    code:link <file:../lib/steps-filter.js#removeNullValues>
  ]).

<removeEmptyCode> a p:Step ;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/filter.js#default>
  ];
  code:arguments ([ a code:EcmaScriptModule;
    code:link <file:../lib/steps-filter.js#removeEmptyCode>
  ]).

<toDataset> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:rdf-stream-to-dataset-stream/bySubject.js#default>
  ].

<toObservation> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-rdf/cube.js#toObservation>
  ];
  code:arguments [
    code:name "observer";
    code:value "observer"^^p:VariableName
  ].

<buildCubeShape> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-rdf/cube.js#buildCubeShape>
  ];
  code:arguments [
    code:name "metadata";
    code:value <parseCubeMetadata>
  ].

<flatten> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-base/flatten.js#default>;
  ].

<serialize> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/ntriples.js#serialize>
  ].

<parseCubeMetadata> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readCubeMetadataFile>
      <parseCubeMetadataTurtle>
    )
  ].

<readCubeMetadataFile> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("cubeMetadataFile"^^p:VariableName).

<parseCubeMetadataTurtle> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/n3.js#parse>
  ].

<parseMetadata> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readMetadataJson>
      <parseMetadataJson>
    )
  ].

<readMetadataJson> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("csvMapping"^^p:VariableName).

<parseMetadataJson> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-formats/jsonld.js#parse>
  ].

<setDestinationGraph> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-rdf/setGraph.js#default>
  ];
  code:arguments ("destinationGraph"^^p:VariableName).

<graphStorePut> a p:Step;
  code:implementedBy [ a code:EcmaScriptModule;
    code:link <node:barnard59-graph-store/put.js#default>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "ENDPOINT_URL"^^p:VariableName
  ], [
    code:name "user";
    code:value "ENDPOINT_USER"^^p:VariableName
  ], [
    code:name "password";
    code:value "ENDPOINT_PASSWORD"^^p:VariableName
  ], [
    code:name "maxQuadsPerRequest";
    code:value 10000000
  ].

  #
  # Statistik Stadt ZÃ¼rich related steps
  #

<filterAll> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#filter> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-filter.js#all> ;
		]
	) .

<mapAll> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#map> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-map.js#all> ;
		]
	) .

<referenceTimeToIri> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#map> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-map.js#createZeitDefinedTermSet> ;
		]
	) .

<removeXxx> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#map> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-map.js#removeXxx> ;
		]
	) .

<createDimensionDefinedTermSet> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#map> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-map.js#createDimensionDefinedTermSet> ;
		]
	) .

<createRaumDefinedTermSet> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#map> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-map.js#createRaumDefinedTermSet> ;
		]
	) .

<createRaumHierarchie> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#map> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-map.js#createRaumHierarchie> ;
		]
	) .

<sameAsIri> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#map> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-map.js#sameAsIri> ;
		]
	) .

<toISODate> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#map> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-map.js#toISODate> ;
		]
	) .

<toNumber> a p:Step ;
	code:implementedBy [
		rdf:type code:EcmaScriptModule ;
		code:link <node:barnard59-base#map> ;
	] ;
	code:arguments (
		[
			rdf:type code:EcmaScriptModule ;
			code:link <file:../lib/steps-map.js#toNumber> ;
		]
	) .